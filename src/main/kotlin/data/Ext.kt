package data

import me.grian.Buy
import me.grian.Database
import me.grian.Items
import me.grian.Sell

fun SellData.addToDb(database : Database) {
    database.sellQueries.insert(itemId, amountSold, pricePerItem)
    val stockBeforeSell = database.itemsQueries.selectWithId(itemId).executeAsOne().current_stock
    database.itemsQueries.updateStock(stockBeforeSell - amountSold, itemId)
}

fun BuyData.addToDb(database : Database) {
    database.buyQueries.insert(itemId, amountBought, pricePerItem)
    val stockBeforeBuy = database.itemsQueries.selectWithId(itemId).executeAsOne().current_stock
    database.itemsQueries.updateStock(stockBeforeBuy + amountBought, itemId)
}

fun Items.toItemData() = ItemData(id, current_stock, item_name, important)

// date autogenerated by psql but sqldelight doesn't support the default, so it doesn't have a default in the type
fun Sell.toSellData() = SellData(item_id, amount_sold, price_per_item, date!!)

fun Buy.toBuyData() = BuyData(item_id, amount_bought, price_per_item, date!!)